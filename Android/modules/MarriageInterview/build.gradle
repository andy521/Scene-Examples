if (isModule.toBoolean()) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}

def safeExtGetVersion(prop, key, fallback) {
    if (rootProject.ext.has(prop)) {
        def map = rootProject.ext.get(prop)
        if (map.containsKey(key)) {
            return map.get(key)
        }
    }
    return fallback
}

def safeExtGetDependence(key, fallback){
    return "$key:${safeExtGetVersion('dependencies', key, fallback)}"
}

if (getGradle().getStartParameter().getTaskRequests()
        .toString().contains("firebase")) {
    apply plugin: 'com.google.gms.google-services'
}

android {
    compileSdkVersion safeExtGetVersion('android', 'compileSdkVersion', 30)
    buildToolsVersion safeExtGetVersion('android', 'buildToolsVersion', '30.0.3')

    defaultConfig {
        if (isModule.toBoolean()) {
            applicationId "io.agora.marriageinterview"
        }
        minSdkVersion safeExtGetVersion('android', 'minSdkVersion', 21)
        targetSdkVersion safeExtGetVersion('android', 'targetSdkVersion', 30)
        versionCode 1
        versionName "1.0.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
        multiDexEnabled true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildFeatures {
        dataBinding = true
    }

    flavorDimensions "test"
    productFlavors {
        leancloud {
        }

        firebase {
        }
    }

    if (isModule.toBoolean()) {
        applicationVariants.all { variant ->
            variant.outputs.all {
                outputFileName = "Marry-${versionName}-${variant.buildType.name}.apk"
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    testImplementation safeExtGetDependence('junit:junit','4.+')
    androidTestImplementation safeExtGetDependence('androidx.test.ext:junit','1.1.2')
    androidTestImplementation safeExtGetDependence('androidx.test.espresso:espresso-core','3.3.0')

    implementation safeExtGetDependence('androidx.multidex:multidex', '2.0.1')
    implementation safeExtGetDependence('androidx.appcompat:appcompat', '1.2.0')
    implementation safeExtGetDependence('androidx.recyclerview:recyclerview','1.2.1')
    implementation safeExtGetDependence('androidx.constraintlayout:constraintlayout', '2.0.4')
    implementation safeExtGetDependence('androidx.preference:preference', '1.1.1')
    implementation safeExtGetDependence('androidx.swiperefreshlayout:swiperefreshlayout', '1.1.0')
    implementation safeExtGetDependence('androidx.lifecycle:lifecycle-extensions', '2.2.0')
    implementation safeExtGetDependence('androidx.lifecycle:lifecycle-extensions', '3.1.0')
    implementation safeExtGetDependence('androidx.cardview:cardview', '1.0.0')

    implementation safeExtGetDependence('com.github.bumptech.glide:glide', '4.11.0')
    annotationProcessor safeExtGetDependence('com.github.bumptech.glide:compiler', '4.11.0')
    implementation safeExtGetDependence('io.reactivex.rxjava2:rxandroid', '2.1.1')
    implementation safeExtGetDependence('com.trello.rxlifecycle3:rxlifecycle-components', '3.1.0')
    implementation safeExtGetDependence('com.trello.rxlifecycle3:rxlifecycle-android-lifecycle', '3.1.0')
    implementation safeExtGetDependence('pub.devrel:easypermissions', '3.0.0')
    implementation safeExtGetDependence('com.google.android.material:material', '1.3.0')

    implementation safeExtGetDependence('io.agora.rtc:full-sdk','3.5.0')

    implementation project(':libs:data-deprecated')
    implementation project(':libs:framework')
}